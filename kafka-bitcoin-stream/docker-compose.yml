version: '3'

services:
  db:
    image: mysql
    platform: linux/x86_64
    build:
      context: ./db
      dockerfile: mysql-dockerfile
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      TZ: 'Asia/Seoul'
    ports:
      - "3307:3306"

  testdb:
    image: mysql
    platform: linux/x86_64
    build:
      context: ./db
      dockerfile: mysql-dockerfile
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      TZ: 'Asia/Seoul'
    ports:
      - "3308:3306"

  redis:
    container_name: redis
    image: redis
    ports:
      - "6479:6379"

  test-redis:
    container_name: test-redis
    image: redis
    ports:
      - "6579:6379"

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
      container_name: kafka
      image: wurstmeister/kafka:latest
      depends_on:
        - zookeeper
      ports:
        - "9094:9094"
      environment:
        # 카프카 접속 가능한 URL 설정
        KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:9094

        # 카프카 서버의 내부 리스너, 0.0.0.0으로 설정해야 카프카 서버 내부 인스턴스 통신 가능
        # 0.0.0.0은 카프카 서버의 모든 인터페이스에서 수신이 가능하다.
        KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://0.0.0.0:9094
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
        KAFKA_CREATE_TOPICS: "test:1:1"
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - kafka-net

  # Kafka 모니터링 툴
  akhq:
    image: tchiotludo/akhq:latest
    hostname: akhq
    depends_on:
      - kafka
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: kafka:9092
    ports:
      - "8083:8080"
    networks:
        - kafka-net

networks:
  kafka-net:
    external: true